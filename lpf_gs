#!/bin/sh

#
# Copyright (c) 2016 Aaron Poffenberger <akp@hypernote.com>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

#
# lpf_gs is an lpd(8) accounting filter that takes a PostScript, PDF
# or text file via stdin and converts it to an output format based on
# the calling name of the program using Ghostscript. Accouting
# information is logged to acct-name.
#
# See lpf_gs(1) for more details.
#

__basename="lpf_gs"
__progname=$(basename "$0")
__dirname=$(dirname "$0")
hostname=$(hostname -s)
pid=$$
err_exit=1
gs_device=$(basename "$__progname" '.if' | cut -d '_' -f 2)

log() {
	if [ -z "$*" ] ; then
		return 0
	fi
	if [ ! -t 0 ] ; then
		# sane date format but different from lpd
		# date=$(date "+%Y-%m-%d %H:%M:%S")

		# format date like lpd
		date=$(date "+%b %e %H:%M:%S")

		# send to stderr for logging
		# lpd will handle logging
		printf "%s\\n" "$date $hostname $__progname[$pid]: ($job)" \
			"$*" > /dev/stderr
	else
		# send to stdout to work with pipes
		# when users call from cl
		printf "%s\\n" "$*"
	fi
}

# create temp files
TMPFILE=$(mktemp -q "/tmp/lpf_${gs_device}.XXXXXXXXXX") ||
	(log "Unable to create $__progname tmp file ... aborting" ; \
	 exit $err_exit)
ASERRFILE="${TMPFILE}.as_err"
ASTMPFILE="${TMPFILE}.as"
GSERRFILE="${TMPFILE}.gs_err"
GSTMPFILE="${TMPFILE}.gs"

cleanup() {
	trap "" EXIT
	rm -f "${TMPFILE}" "${ASERRFILE}" "${ASTMPFILE}" \
		"${GSERRFILE}" "${GSTMPFILE}"
}
trap cleanup EXIT
trap 'log $__progname aborted by user;exit $err_exit' INT

TRUE=0
FALSE=1

# command line parameters that will be passed in from lpd
# printcap(5) FILTERS section
af=""		  # accounting file path
ctrl=$FALSE	  # whether to pass control characters literally
host="(null)"	  # sending host
indent=0	  # how much to indent
job="stdin"	  # job name
length=66	  # page length (default from lpf.c)
name=""		  # user who started job
width=132	  # page width (default from lpf.c)

# other variables
call="$0 $*"
cmd="print"	  # options: abort | print | usage | version
debug=$FALSE
as=$(which a2ps 2>/dev/null || which enscript 2>/dev/null)
gs=$(which gs 2>/dev/null)
version="1.0"
gs_init="${__dirname}/gs_init.ps"

# does the real work
print() {
	# send stdin to a file we can check format to see whether
	# we can print it
	cat > "${TMPFILE}"
	can_convert=$TRUE
	ft=$(file -b "${TMPFILE}")
	if echo "$ft" | grep -q text; then
		__as=$(basename "$as")
		if [ "$__as" = "a2ps" ] ; then
			log "Converting from ASCII to postscript" \
				"using $__as"
			$as -q -M letter -B --center-title="${job}" \
				--output="${ASTMPFILE}" \
				"${TMPFILE}" 2>"${ASERRFILE}"
			as_success=$?
		elif [ "$__as" = "enscript" ] ; then
			log "Converting from ASCII to postscript" \
				"using $__as"
			$as -q --header="${job} %W Page $% of $=" \
				--output="${ASTMPFILE}" \
				"${TMPFILE}" 2>"${ASERRFILE}"
			as_success=$?
		else
			can_convert=$FALSE
			log No ASCII converter found, abort conversion...
			exit $err_exit
		fi
		if [ $as_success -eq $FALSE ] ; then
			log "$(cat "${ASERRFILE}")"
			exit $err_exit
		else
			mv "${ASTMPFILE}" "${GSTMPFILE}"
			mv_success=$?
			if [ $mv_success -eq $FALSE ] ; then
				log "Unable to mv" \
					"${ASTMPFILE} to ${GSTMPFILE}"
				exit $err_exit
			fi
		fi
	elif echo "$ft" | grep -Eq 'PDF|PostScript'; then
		log "Converting from PDF to $gs_device"
		mv "${TMPFILE}" "${GSTMPFILE}"
		mv_success=$?
		if [ $mv_success -eq $FALSE ] ; then
			log "Unable to mv ${ASTMPFILE} to ${GSTMPFILE}"
			exit $err_exit
		fi
	else
		can_convert=$FALSE
		log "Unknown file type ($ft), aborting conversion..."
		exit $err_exit
	fi

	if [ $can_convert -eq $TRUE ] ; then
		# If there's a gs_init file prepend it to the processing queue.
		# gs fails if you leave an extra space from an empty variable.
		# Better to use an if/else to call gs correctly with/without
		# gs_init.ps
		if [ -e "${gs_init}" ] ; then
			$gs -q -dNOPROMPT -dNOPAUSE -dSAFER -dBATCH \
				-dNOPAUSE -sDEVICE="${gs_device}" \
				-sOutputFile=- "${gs_init}" "${GSTMPFILE}" \
				-c quit 2>"${GSERRFILE}"
			gs_success=$?
		else
			$gs -q -dNOPROMPT -dNOPAUSE -dSAFER -dBATCH \
				-dNOPAUSE -sDEVICE="${gs_device}" \
				-sOutputFile=- "${GSTMPFILE}" \
				-c quit 2>"${GSERRFILE}"
			gs_success=$?
		fi
		if [ $gs_success -ne $TRUE ] ; then
			log "$(cat "${GSERRFILE}")"
			exit $err_exit
		fi

		if [ ! -z "$af" ] ; then
			action="(${GSTMPFILE}) (r) file runpdfbegin"
			action="$action pdfpagecount = quit"
			npages=$($gs -q -dNODISPLAY -c "$action" \
				2>"${GSERRFILE}")
			if [ $? -eq $TRUE ] ; then
				printf "%7.2f\\t%s:%s\\n" "$npages" "$host" \
					"$name" >> $af
			else
				log "Print job completed but unable to" \
					"count pages for accounting file"
				log "$(cat "${GSERRFILE}")"
				log "This error often arises when" \
					"converting ASCII to postscript"
			fi
		fi
	fi
}

version() {
	log "$__progname $version"
}

usage() {
	# dispose of stdin data
	if [ ! -t 0 ] ; then
		cat > /dev/null
	fi
	log "usage: $__progname [-c] [-h host] [-i indent] [-l length]" \
		"[-n name] [-w width] [acctfile]"
}

debug() {
	if [ $debug -eq $TRUE ] || [ -n "$LPF_GS_DEBUG" ] ; then
		log Variables:
		log "$call"
		log "device=$gs_device"
		log "af=$af"
		log "ctrl=$ctrl"
		log "host=$host"
		log "gs=$gs"
		log "indent=$indent"
		log "length=$length"
		log "name=$name"
		log "width=$width"
		log "pid=$pid"
		log "cmd=$cmd"
		log "version=$version"
		log
	fi
}

if [ "$__progname" = "$__basename" ] ; then
	usage
	exit 0
fi

if [ ! -f "$gs" ] ; then
	log "Ghostscript not installed."
	log
	log "Please install Ghostscript."
	exit $err_exit
fi

if ! gs -h | grep -q "$gs_device"; then
	version
	log
	log "No such ghostscript device '$gs_device' (cf gs -h)"
	log
	log "Execute 'gs -h' to see a list of supported devices."
	exit $err_exit
fi

if [ -z "$gs" ] ; then
	version
	log
	log "Unable to find ghostscript."
	exit $err_exit
fi

while getopts :cdh:i:j:l:n:vw: opt ; do
	case ${opt} in
		c)
			ctrl=$TRUE
			;;
		d)
			debug=$TRUE
			;;
		h)
			host=${OPTARG}
			;;
		i)
			indent=${OPTARG}
			;;
		j)
			job=${OPTARG}
			;;
		l)
			length=${OPTARG}
			;;
		n)
			name=${OPTARG}
			;;
		v)
			cmd="version"
			;;
		w)
			width=${OPTARG}
			;;
		:)
			log "$__progname: option requires an argument" \
				"-- ${OPTARG}"
			log
			cmd=abort
			;;
		\?)
			log "$__progname: invalid option -- ${OPTARG}"
			log
			cmd=abort
			;;
	esac
done
shift $(( OPTIND - 1 ))
# get remaining parameter as accounting file
af="$*"

debug
case $cmd in
	print)
		print
		;;
	version)
		version
		;;
	usage)
		usage
		;;
	*)
		usage
		debug
		exit $err_exit
		;;
esac
